import cultivos.*
import personaje.*
import bonus.*
import wollok.game.*

describe "Sembrar los cultivos"{
    test "Siembra un maiz exitosamente"{
        personaje.sembrarMaiz()
        assert.that(not personaje.cosasAqui().isEmpty())
    }
    test "No puede sembrar maiz porque ya hay otro maiz"{
        personaje.sembrarMaiz()
        assert.throwsException({personaje.sembrarMaiz()})
    }
    test "Siembra trigo exitosamente"{
        personaje.sembrarTrigo()
        assert.that(not personaje.cosasAqui().isEmpty())
    }
    test "No puede sembrar trigo porque ya hay trigo"{
        personaje.sembrarTrigo()
        assert.throwsException({personaje.sembrarTrigo()})
    }
    test "Siembra un tomaco exitosamente"{
        personaje.sembrarTomaco()
        assert.that(not personaje.cosasAqui().isEmpty())
    }
    test "No puede sembrar tomaco porque ya hay otro tomaco"{
        personaje.sembrarTomaco()
        assert.throwsException({personaje.sembrarTomaco()})
    }
}

describe "Regar los cultivos"{
    test "No puede regar si no hay nada"{
        assert.throwsException({personaje.regar()})
    }
    test "Riega un maiz exitosamente"{
        personaje.sembrarMaiz()
        assert.equals(personaje.cosaAqui().image(), "corn_baby.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "corn_adult.png")
    }
    test "Riega el trigo para que llegue a todas sus etapas exitosamente"{
        personaje.sembrarTrigo()
        assert.equals(personaje.cosaAqui().image(), "wheat_0.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "wheat_1.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "wheat_2.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "wheat_3.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "wheat_0.png")
    }
    test "Riega el tomaco existosamente"{
        personaje.sembrarTomaco()
        personaje.regar()
        assert.that(personaje.cosasAqui().isEmpty())  // No hay nada en la posicion del personaje porque se movio el tomaco
    }
    //test "No puede regar el tomaco porque hay algo arriba"{
    //}
}

describe "Cosechar los cultivos"{
    test "No puede cosechar si no hay nada"{
        assert.throwsException({personaje.cosechar()})
    }
    test "Cosecha un maiz adulto exitosamente"{
        personaje.sembrarMaiz()
        personaje.regar()
        personaje.cosechar()
        assert.that(personaje.cosasAqui().isEmpty())
        assert.equals("a Maiz", personaje.cosechasParaVenta().first().kindName())
    }
    test "No puede cosechar el ma√≠z porque no es adulto"{
        personaje.sembrarMaiz()
        assert.throwsException({personaje.cosechar()})
    }
    test "Cosecha el trigo en las etapas cosechables"{
        personaje.sembrarTrigo()
        personaje.regar()
        personaje.regar()
        personaje.cosechar()
        assert.that(personaje.cosasAqui().isEmpty())
        assert.equals("a Trigo", personaje.cosechasParaVenta().first().kindName())
        personaje.sembrarTrigo()
        personaje.regar()
        personaje.regar()
        personaje.regar()
        personaje.cosechar()
        assert.that(personaje.cosasAqui().isEmpty())
        assert.equals(2, personaje.cosechasParaVenta().size())
    }
}