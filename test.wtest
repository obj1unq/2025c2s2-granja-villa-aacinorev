import cultivos.*
import personaje.*
import bonus.*
import wollok.game.*

describe "Sembrar los cultivos"{
    test "Siembra un maiz exitosamente"{
        personaje.sembrarMaiz()
        assert.that(not personaje.cosasAqui().isEmpty())
    }
    test "No puede sembrar maiz porque ya hay otro maiz"{
        personaje.sembrarMaiz()
        assert.throwsException({personaje.sembrarMaiz()})
    }
    test "Siembra trigo exitosamente"{
        personaje.sembrarTrigo()
        assert.that(not personaje.cosasAqui().isEmpty())
    }
    test "No puede sembrar trigo porque ya hay trigo"{
        personaje.sembrarTrigo()
        assert.throwsException({personaje.sembrarTrigo()})
    }
    test "Siembra un tomaco exitosamente"{
        personaje.sembrarTomaco()
        assert.that(not personaje.cosasAqui().isEmpty())
    }
    test "No puede sembrar tomaco porque ya hay otro tomaco"{
        personaje.sembrarTomaco()
        assert.throwsException({personaje.sembrarTomaco()})
    }
}

describe "Regar los cultivos"{
    test "No puede regar si no hay nada"{
        assert.throwsException({personaje.regar()})
    }
    test "Riega un maiz exitosamente"{
        personaje.sembrarMaiz()
        assert.equals(personaje.cosaAqui().image(), "corn_baby.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "corn_adult.png")
    }
    test "Riega el trigo para que llegue a todas sus etapas exitosamente"{
        personaje.sembrarTrigo()
        assert.equals(personaje.cosaAqui().image(), "wheat_0.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "wheat_1.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "wheat_2.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "wheat_3.png")
        personaje.regar()
        assert.equals(personaje.cosaAqui().image(), "wheat_0.png")
    }
    test "Riega el tomaco existosamente"{
        personaje.sembrarTomaco()
        personaje.regar()
        assert.that(personaje.cosasAqui().isEmpty())  // No hay nada en la posicion del personaje porque se movio el tomaco
    }
    test "No puede regar el tomaco porque hay algo arriba"{
        game.addVisual(new Maiz(position = personaje.position().up(1)))
        personaje.sembrarTomaco()
        assert.throwsException({ personaje.regar() })
    }
}

describe "Cosechar los cultivos"{
    test "No puede cosechar si no hay nada"{
        assert.throwsException({personaje.cosechar()})
    }
    test "Cosecha un maiz adulto exitosamente"{
        personaje.sembrarMaiz()
        personaje.regar()
        personaje.cosechar()
        assert.that(personaje.cosasAqui().isEmpty())
        assert.equals("a Maiz", personaje.cosechasParaVenta().first().kindName())
    }
    test "No puede cosechar el maíz porque no es adulto"{
        personaje.sembrarMaiz()
        assert.throwsException({personaje.cosechar()})
    }
    test "Cosecha el trigo en las etapas cosechables"{
        personaje.sembrarTrigo()
        personaje.regar()
        personaje.regar()
        personaje.cosechar()
        assert.that(personaje.cosasAqui().isEmpty()) // Deberia cosecharse (no esta mas en el suelo) cuando esta en etapa 2
        assert.equals("a Trigo", personaje.cosechasParaVenta().first().kindName()) // Deberia haber un trigo en la lista de cosechas para venta
        personaje.sembrarTrigo()
        personaje.regar()
        personaje.regar()
        personaje.regar()
        personaje.cosechar()
        assert.that(personaje.cosasAqui().isEmpty())    // Deberia cosecharse (no esta mas en el suelo) cuando esta en etapa 3
        assert.equals(2, personaje.cosechasParaVenta().size()) // Deberian haber dos elementos en la lista de cosechas (los dos trigos)
    }
    test "No puede cosechar el trigo porque no está en una etapa cosechable"{
        personaje.sembrarTrigo()                        
        assert.throwsException({personaje.cosechar()})  // Etapa 0, no deberia poder cosecharse
        personaje.regar()
        assert.throwsException({personaje.cosechar()}) // Etapa 1, no deberia poder cosecharse
    }
    test "Cosecha el tomaco exitosamente"{
        personaje.sembrarTomaco()
        personaje.cosechar()
        assert.that(personaje.cosasAqui().isEmpty())
        assert.equals("a Tomaco", personaje.cosechasParaVenta().first().kindName())
    }
}

describe "Vender los cultivos"{
    method initialize(){
        personaje.sembrarTomaco()
        personaje.cosechar()  // cuando venda, consigue 80 monedas
    }
    test "No puede vender porque no está en un mercado"{
        assert.throwsException({personaje.vender()})
    }
    test "No puede vender porque el mercado no tiene suficientes monedas"{
        game.addVisual(new Mercado(position = personaje.position()))  // Arranca con 0 monedas
        assert.throwsException({personaje.vender()})                  // Quiere vender el tomaco que vale 80, no puede
    }
    test "Vende exitosamente"{
        const unMercado = new Mercado(position = personaje.position(), monedas = 100)
        game.addVisual(unMercado)
        personaje.vender()
        assert.that(personaje.cosechasParaVenta().isEmpty())                   // Se vacian las cosechas porque se venden
        assert.equals(80, personaje.oro())                                     // El personaje consigue 80 oro
        assert.equals("a Tomaco", unMercado.mercaderia().first().kindName())   // El tomaco deberia estar en la mercaderia
        assert.equals(20, unMercado.monedas())                                 // La mercaderia deberia tener menos 80 monedas
    }
}

describe "Poner aspersores y riegan"{
    method initialize(){
        personaje.position(game.at(5,5)) 
    }
    test "Pone un aspersor exitosamente"{
        personaje.ponerAspersor()
        assert.that(not personaje.cosasAqui().isEmpty())
    }
    test "El aspersor riega exitosamente"{
        const maizNorte = new Maiz(position = game.at(5,6))
        const maizNoreste = new Maiz(position = game.at(6,6))
        const maizEste = new Maiz(position = game.at(6,5))
        const maizSureste = new Maiz(position = game.at(6,4))
        const maizSur = new Maiz(position = game.at(5,4))
        const maizSuroeste = new Maiz(position = game.at(4,4))
        const maizOeste = new Maiz(position = game.at(4,5))
        const maizNoroeste = new Maiz(position = game.at(4,6))
        game.addVisual(maizNorte)
        game.addVisual(maizNoreste)
        game.addVisual(maizEste)
        game.addVisual(maizSureste)
        game.addVisual(maizSur)
        game.addVisual(maizSuroeste)
        game.addVisual(maizOeste)
        game.addVisual(maizNoroeste)
        personaje.ponerAspersor()                                   
        assert.equals("an Aspersor", personaje.cosaAqui().kindName()) //Deberia haber un aspersor en la posicion del personaje
        personaje.cosaAqui().regarTodos()
        assert.equals("corn_adult.png", maizNorte.image())
        assert.equals("corn_adult.png", maizNoreste.image())
        assert.equals("corn_adult.png", maizEste.image())
        assert.equals("corn_adult.png", maizSureste.image())
        assert.equals("corn_adult.png", maizSur.image())
        assert.equals("corn_adult.png", maizSuroeste.image())
        assert.equals("corn_adult.png", maizOeste.image())
        assert.equals("corn_adult.png", maizNoroeste.image()) // Se deberian regar los maices que estan en todas las direcciones
    }
}
